// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts   Account[]
    sessions   Session[]
    workspaces Workspace[]
    members    Member[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

// Custom models
model Workspace {
    id   String @id @default(cuid())
    name String

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workspaceMembers WorkspaceMember[]

    @@map("workspaces")
}

enum MemberStatus {
    ACTIVE
    INACTIVE
    INVITED
    DECLINED
}

model WorkspaceMember {
    status MemberStatus @default(ACTIVE)

    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
    member      Member    @relation(fields: [memberId], references: [id])
    memberId    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([workspaceId, memberId])
    @@map("workspace_members")
}

model Member {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workspaceMembers WorkspaceMember[]

    @@map("members")
}
